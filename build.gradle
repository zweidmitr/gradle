plugins {
    id 'java'
    id 'war'
}

apply from: 'script.gradle'
//apply plugin: CustomPlugin
//apply plugin: 'custom'
//apply plugin: 'java'

allprojects {
    group "zweim"
    repositories {
        mavenCentral()
    }
}

repositories {
//    ~/.gradle/caches --offline
//    ~/.m2/repository
//    mavenLocal()
//    maven {
//        name "nexus zweim"
//        uri "https://nexus.zweim/repository"
//    }
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
}

configurations {

    def configuration = getByName("implementation")
    zweim {
        description = "zweim  configuration"
    }
    configuration.extendsFrom(zweim)

    all {
        resolutionStrategy {
//            force('org.springframework:spring-aop:5.3.8')
        }
    }
}

dependencies {
    compileOnly "jakarta.servlet:jakarta.servlet-api:5.0.0"

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies
    compileOnly platform('org.springframework.boot:spring-boot-dependencies:2.6.7')

//    add('implementation',[group:"org.springframework",name: 'spring-webmvc',version: '5.3.20'])
//    add('implementation',group:"org.springframework:spring-webmvc:version:5.3.20")
    implementation("org.springframework:spring-webmvc:5.3.20") {
//        transitive(false)
//        exclude(group: "org.springframework", module:"spring-aop")
    }
    implementation('org.springframework:spring-aop:5.3.20') {
//        force(true)
    }
}


configurations.runtimeClasspath.files.each { println it }
jar {

    def jars = configurations.runtimeClasspath.files.collect { "lib/$it.name" }
    manifest {
        attributes 'Main-Class': 'com.zwei.HelloWorld',
                'Class-Path': jars.join(' ')
    }
//    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
//    from(configurations.runtimeClasspath.files.collect {zipTree(it)})
}

task copyAllDependecies(type: Copy) {
    from(configurations.runtimeClasspath.files)
    into("$buildDir/libs/lib")
}
jar.dependsOn copyAllDependecies

// buildSrc -- id 'custom'
class CustomPlugin implements Plugin<Project> {
    @Override
    void apply(Project project) {
        addHelloTask(project)
    }

    void addHelloTask(Project project) {
        def map = [description: "Hello task", group: "zweim", type: DefaultTask]
        project.task(map, "hello") {
            println "configuration phase. Task hello"
            doLast {
                println "execution phase, Action1 - (2)"
            }
            doFirst {
                println "execution phase, Action2 - (1)"
            }
            doLast {
                println "execution phase, Action3 - (3)"
            }
            println "task: $description, group: $group, actions: ${actions.size()}"
            println "path task: $path"
        }
    }
}